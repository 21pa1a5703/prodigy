def is_valid(board, row, col, num):
    # Check if the number is already present in the row
    for x in range(9):
        if board[row][x] == num:
            return False
   
    # Check if the number is already present in the column
    for x in range(9):
        if board[x][col] == num:
            return False
   
    # Check if the number is already present in the 3x3 grid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[i + start_row][j + start_col] == num:
                return False
   
    return True

def solve_sudoku(board):
    # Find an empty position
    empty_pos = find_empty(board)
   
    # If there are no empty positions, puzzle is solved
    if not empty_pos:
        return True
   
    row, col = empty_pos
   
    # Try placing numbers 1 to 9
    for num in range(1, 10):
        # Check if the number is valid at the empty position
        if is_valid(board, row, col, num):
            # Place the number
            board[row][col] = num
           
            # Recursively solve the puzzle
            if solve_sudoku(board):
                return True
           
            # If the recursive call returns False, backtrack
            board[row][col] = 0
   
    # If no number fits at this position, puzzle cannot be solved
    return False

def find_empty(board):
    # Find the first empty position (with value 0)
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

def print_board(board):
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - ")
       
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("| ", end="")
           
            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")

# Example Sudoku puzzle
sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

print("Sudoku puzzle:")
print_board(sudoku_board)

if solve_sudoku(sudoku_board):
    print("\nSudoku solution:")
    print_board(sudoku_board)
else:
    print("\nNo solution exists for the given Sudoku puzzle.")

